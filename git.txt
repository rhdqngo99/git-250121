git status
: 현재 저장소의 상태를 확인하는 명령어
 
git init
: 깃 저장소를 초기화하는 명령(생성시 최초 1회)

git add <file>
: <file> 부분에 변경사항을 확정하고자 하는 파일경로를 적어준다.
파일 경로는 git bash 창에서 알려주는 내용을 그대로 적는다.

git add .
: 마침표.는 모든 파일을 의미한다.
즉, git add .은 변경사항이 있는 모든 파일을 스테이징하겠다는 의미이다.

git commit -m "커밋 메시지"
: 변경사항을 한데 모아 하나의 버전으로 확정짓는 것을 커밋(commit)이라 한다.
이러한 커밋을 하기 위한 대상을 선정하는 것을
staging이라 한다.(staging은 git add로 한다)
-m : 메시지를 남기겠다.
"커밋 메시지" : 해당 버전을 확정 지을 때,
나중에 보더라도 어떤 업데이트 사항이 있는지
적어두는 공간이다.
-> "변경사항에 대한 기록 작성"

git push origin main
: git commit을 한 뒤 온라인의 깃허브에 올리는 명령어로,
origin이라는 온라인 저장소에 main 브랜치를 업데이트하여 올리겠다는 의미이다.

// 저장소 사용자 설정
git config [--local | --global] user.email "유저이메일"
: --local -> 현재 폴더의 설정만 바꾸겠다.
: --global -> 현재 컴퓨터의 설정으로 하겠다.
: user.emial -> 이메일 설정
: "" -> 이메일을 작성하는 공간
=> 이메일 설정
git config [--local | --global] user.name "유저이름"
: user.name -> 작업자 이름 설정
: "" -> 작업자 이름을 작성하는 공간

// 위 설정이 끝났으면 이제 commit이 가능하다.
// commit을 하려면 작업자 설정이 필요하다는 뜻이다.


// 깃허브 저장소의 저장소를 로컬로 복제하기
// -> 다른 컴퓨터에서 작업 이어하기
깃허브 페이지에서 해당 리포지토리에 들어가서 code가 적힌 초록색 버튼을 클릭,
링크 우측의 복사 버튼 클릭해서 링크 복사
-> 깃배쉬
git clone [링크] .
: [링크]의 저장소를 로컬 저장소로 복제하는 명령어
이때, 마지막의 마침표.를 적지 않으면 저장소 이름으로 폴더가 만들어진다.
현재 깃배쉬가 열린 폴더에 내용을 그대로 넣으려면
마침표.를 마지막에 추가하여 "현재 폴더에 복제"를 해야 한다

exit
: 깃 배쉬창 닫기

clear
: 창 내용 청소

// git을 명령어가 아닌 UI로 시각화하여
// 사용하기 위해 프로그램을 설치하자.
// sourcetree

// 소스트리 사용후 변경사항


// git으로 관리하는 파일은 기본적으로
// 문서 파일을 대상으로 한다.
// 영상, 음성, 이미지 등의 대용량 파일은
// 가능한 한 git으로 관리하지 않고 따로 관리해야 한다.
// 이러한 파일들이 올라가지 않도록 설정하는 파일이 존재한다.
★.gitignore라는 텍스트 파일이다.
